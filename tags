!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/neosapien/development/go/mathlang/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
DefaultMathRegexp	regexp.go	/^func DefaultMathRegexp() (def map[string]*regexp.Regexp, err error) {$/;"	f	package:main	typeref:typename:(def map[string]*regexp.Regexp, err error)	signature:()
JSONRead	regexp.go	/^func JSONRead(file, key string) (value string) {$/;"	f	package:main	typeref:typename:(value string)	signature:(file, key string)
TestAllRegexp	regexp_test.go	/^func TestAllRegexp(t *testing.T) {$/;"	f	package:main	signature:(t *testing.T)
check	main.go	/^func check(err error) {$/;"	f	package:main	signature:(err error)
default	makefile	/^default:$/;"	t
frac	syntax_regexp.json	/^    "frac"    : "(\\\\S+|})\/({|\\\\S+)",$/;"	s
function	syntax_regexp.json	/^    "function": "(ln|log|cos|tan|sec|csc|cot|arg|lim|sqrt|root|arccos|sum|int|prod|arcsin|arctan/;"	s
install	makefile	/^install:$/;"	t
letters	syntax_regexp.json	/^    "letters" : "(alpha|Alpha|beta|Beta|gamma|Gamma|delta|Delta|epsilon|Epsilon|zeta|Zeta|eta|Et/;"	s
logic	syntax_regexp.json	/^    "logic"   : "(exists|forall|(s)*in([^a-z]|$)|cup|empty|cap|and|or|not|subset|subseteq|notin)/;"	s
main	main.go	/^func main() {$/;"	f	package:main	signature:()
main	main.go	/^package main$/;"	p
main	regexp.go	/^package main$/;"	p
main	regexp_test.go	/^package main$/;"	p
main	replace.go	/^package main$/;"	p
mathbb	syntax_regexp.json	/^    "mathbb"  : "(N|Z|D|Q|R|C|U|P|K){2}",$/;"	s
mathcal	syntax_regexp.json	/^    "mathcal" : "([A-Z])cal",$/;"	s
output	main.go	/^func output(math string) {$/;"	f	package:main	signature:(math string)
replace	replace.go	/^func replace(math string) (s string) {$/;"	f	package:main	typeref:typename:(s string)	signature:(math string)
replaceFont	replace.go	/^func replaceFont(math string) (s string) {$/;"	f	package:main	typeref:typename:(s string)	signature:(math string)
replaceFrac	replace.go	/^func replaceFrac(math string) (s string) {$/;"	f	package:main	typeref:typename:(s string)	signature:(math string)
replaceKeywords	replace.go	/^func replaceKeywords(math string) (s string) {$/;"	f	package:main	typeref:typename:(s string)	signature:(math string)
replaceParnethesis	replace.go	/^func replaceParnethesis(math string) (s string) {$/;"	f	package:main	typeref:typename:(s string)	signature:(math string)
replaceShape	replace.go	/^func replaceShape(math string) (s string) {$/;"	f	package:main	typeref:typename:(s string)	signature:(math string)
replaceSymbol	replace.go	/^func replaceSymbol(math string) (s string) {$/;"	f	package:main	typeref:typename:(s string)	signature:(math string)
replaceText	replace.go	/^func replaceText(math string) (s string) {$/;"	f	package:main	typeref:typename:(s string)	signature:(math string)
shape	syntax_regexp.json	/^    "shape"   : "({[^}]*})\\\\^{(_|->|\\\\.|~|\\\\^)}",$/;"	s
symbol	syntax_regexp.json	/^    "symbol"  : "\\\\s(==|=>|<=>|>>|<<|>=|<=|!=|~=|~|->|\\\\|->|\\\\*|o|<~|>~|\\\\.)\\\\s",$/;"	s
text	syntax_regexp.json	/^    "text"    : "\\"([^\\"]*)\\""$/;"	s
